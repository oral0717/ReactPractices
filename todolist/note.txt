P1-1目录
基础内容
环境搭建
基础语法
原理进阶
动画

Redux
Redux进阶

实战项目
环境搭建
Header
首页
详情页

登录校验
上线

creat-react-app
组件化思维
JSX
开发调试工具
虚拟DOM
生命周期

React-transition-group
Redux
Antd
UI,容器组件
无状态组件
redux-thunk
redux-saga
Styled-components //样式布局，实现样式编码，避免组件间样式干扰
Immutable.js // 数据框架
redux-immutable
axios

P2-1React简介
ReactJS ReactNative ReactVR
ReactFiber 即React16，React底层在事件循环中加入了优先级等概念，可以利用事件循环的碎片时间中，执行一些高优先级的用户交互，提高用户体验
React                           vs  Vue
更灵活，处理复杂项目，选择性方案更多      更多API，实现功能更简单，正因为API多，灵活性受限制
复杂度高项目使用                       面向用户端复杂度不是特别高的项目适用

P2-2react开发环境准备
script引入.js文件来使用react(古老)

通过脚手架工具来编码：webpack gulp grunt

create-react-app //官方推荐脚手架工具,用于初级学习
用法：
npm i -g creat-react-app // 全局安装脚手架create-react-app
create-react-app todolist // 创建并生成项目todolist
npm run start // 启动
todolist项目目录：manifest.json ,用户在手机上生成app图标的配置
                serviceWorker.js ,PWA，断网时，用户可以离线访问本app
                App.test.js ,自动化测试文件

P3-1
  1.import React, { Component, Fragment } from 'react'
  // Fragment是个标签占位符，可以用来包裹元素却在html中不会显示

  2.onChange={this.handleChange.bind(this)}
  // JSX里元素绑定事件，一定要绑定this,绑定作用域

P3-4 JSX语法补充
  1.dangerouslySetInnerHTML={{__html:item}} 插入html文本，html语法不转义
  2.<label htmlFor='name' className='label'></label>, for要替换成htmlFor,class要替换成className
  3.JSX注释形式 {/*xxxxxx*/}或
  {
    //xxxxxx
  }

P3-5拆分组件与组件之间的传值
  1.
  constructor(props){
    super(props)
    this.handleDel = this.handleDel.bind(this) //性能更好，最好不要把绑定this的放在组件上，原因？
  }
  2.子组件调用父组件的某个方法，一定要注意方法的this绑定

P3-6优化
  1.this.setState((prevState)=>{ // setState参数为一个函数，使之异步化，提升效率
      const { inputValue, list } = prevState
      return {
        list: [...list, inputValue]
      }
    })

P3-7
  jq命令式开发，操作dom
  react声明式开发
    与其他框架并存
    组件化
    单项数据流，父组件向子组件传值，子组件不能直接改变父组件传过来的值
    视图层框架，不方便与非父子组件传值，这是需要数据层框架redux,flux
    函数式编程，方便自动化测试
P4-1
  React developer tools
P4-2
  import PropTypes from 'prop-types'   //对变量类型做属性校验
  写法一：
  TodoItem.propTypes = {
    item: PropTypes.string,
    index: PropTypes.number,
    onHandleDel: PropTypes.func,
    test: PropTypes.string
  }
  TodoItem.defaultProps = {
    test: 'xx'
  }

  写法二：
  在组件内部声明：
  static propTypes = {
    item: PropTypes.string,
    test: PropTypes.string // 同样会约束defaultProps
  }
  static defaultProps = {
    test: 'xx'
  }
  PropTypes.arrayOf()
  PropTypes.oneOfType([])

P4-4
  虚拟DOM,本质上是JS对象，用js的方式描述DOM
  节省性能：js对象对比 比真实DOM对比 比较省性能，减少了对真实DOM的创建及对比
  JSX是模板，不是真实DOM，React.creatElement()使模板变成JS对象（虚拟DOM），再变成真实DOM

  虚拟DOM优点：
  1.性能提升
  2.使跨端应用得以实现，React Native, 虚拟DOM可以在原生应用里识别生成原生组件，不用生成DOM

P4-6 Diff算法
1.setState异步函数执行，短时间多次setState,合并成一次setState，减少比对次数
2.虚拟DOM逐层比对
3.key保持稳定，提高虚拟DOM对比性能

P4-7  Ref
  1.对dom的引用
  React16, ref={(input)=>{this.input=input}}
  少用ref，容易因为获取不到想要的dom而造成bug。react是数据驱动，尽量不操作dom
  setState(()=>{},()=>{})
P4-9 生命周期函数
  组件都是继承自React.Component(),其里面都默认内置了其他生命周期函数，唯独没有内置render,因此新组建一定要有render函数，别的生命周期都可以没有
  shouldComponentUpdate(nextProps, nextState),项目优化
  componentWillReceiveProps(nextProps)
P4-10
1.ajax请求放在 componentDidMount()
2.发送ajax请求，使用axios包
  import axios from 'axios'
  componentDidMount(){
    axios.get('/api/todolist')
      .then(()=>{alert('succ')})
      .catch(()=>{alert('error')})
  }
  Charles代理接口
  1.用charles抓取请求的时候，charles总是抓不到localhost:3000发出的请求，也就没办法模拟数据，
  后来看官网说什么要在charles模拟本地数据的时候域名用localhost.charlesproxy.com。
  然而很不幸的是，我本地http://localhost.charlesproxy.com:3000本启动不起来项目，所以只能修改react项目的默认域名，
  在react项目的package.json文件中将原来的"start": “react-scripts start”, 这一句改为
  "set PORT=3000 HOST=localhost.charlesproxy.com && react-scripts start"，
  项目的本地启动地址就变成了了http://localhost.charlesproxy.com:3000。此时再用charles模拟数据就成功了。


P4-11 React动画
1.transition  vs animation
2.react-transition-group // 第三方动画模块
https://reactcommunity.org/react-transition-group/css-transition


P5-1Redux
把所有的数据放入store中管理，一个组件改变了store中的数据，
其他组件感知到store数据中的变化后，取到新数据并更新









/////todo start
1.如何配置项目，使得路径直接识别index.js，而不用将路径写满
  import Animation from './Animation'等价于
  import Animation from './Animation/index.js'

2.项目目录规则，src有什么特殊性
/////todo end

总结：
1.性能提升：
  1.在constructor中绑定好方法的this
  2.setState传入函数，异步方式修改state，可以合并多次setState
  3.shouldComponentUpdate,排除不需要重新渲染的时机
  4.要使用稳定的值做key
















